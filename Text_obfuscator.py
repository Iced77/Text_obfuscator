import random

# Same dictionaries as before
identical_group_replacements = {
    "**": ["·ïØ", "‚òÖ", "‚ú™"],
    "!!": ["‚Äº", "‚ùó"],
    "!?": ["‚Åâ", "‚ÄΩ"],
    "??": ["‚Åá", "‚ùì"],
    "?!": ["‚Åà", "‚Åâ"],
    "...": ["‚Ä¶", "‚ãØ"],
    " ": ["‚ÄÜ‚Äâ‚Äà‚ÄÖ‚ÄÑ", "‚Äá", "‚ÄÇ"],

    "DZ": ["«±", "Íú®"],
    "Dz": ["«≤", "«Ö"],
    "LJ": ["«á", "–â"],
    "Lj": ["«à", "–â"],
    "NJ": ["«ä", "–ä"],
    "Nj": ["«ã", "–ä"],

    "dz": ["«≥", " £"],
    "lj": ["«â", "—ô"],
    "nj": ["«å", "—ö"]
}

approximate_group_replacements = {
    "II": ["‚Ö°", "I–Ü"],
    "III": ["‚Ö¢", "III"],
    "IV": ["‚Ö£", "IV"],
    "VI": ["‚Ö•", "VI"],
    "VII": ["‚Ö¶", "VII"],
    "VIII": ["‚Öß", "VIII"],
    "IX": ["‚Ö®", "IX"],
    "XI": ["‚Ö™", "XI"],
    "XII": ["‚Ö´", "XII"],

    "ii": ["‚Ö±", "ii"],
    "iii": ["‚Ö≤", "iii"],
    "iv": ["‚Ö≥", "iv"],
    "vi": ["‚Öµ", "vi"],
    "vii": ["‚Ö∂", "vii"],
    "viii": ["‚Ö∑", "viii"],
    "ix": ["‚Ö∏", "ix"],
    "xi": ["‚Ö∫", "xi"],
    "xii": ["‚Öª", "xii"],

    "IJ": ["ƒ≤", "IJ"],

    "ae": ["√¶”ï", "√¶"],
    "bl": ["–´", "bl"],
    "dz": [" £", "dz"],
    "ij": ["ƒ≥", "ij"],
    "lm": ["„èê", "lm"],
    "ln": ["„èë", "ln"],
    "log": ["„èí", "log"],
    "ls": [" ™", "ls"],
    "lx": ["„èì", "lx"],
    "lz": [" ´", "lz"],
    "mb": ["„èî", "mb"],
    "mil": ["„èï", "mil"],
    "mol": ["„èñ", "mol"],
    "Oy": ["—∏", "Oy"],
    "oy": ["—π", "oy"],
    "ts": [" ¶", "ts"]
}

identical_replacements = {
    "`": ["’ù", "`"],
    ",": ["Õµ", ","],
    ":": ["÷â", ":"],
    ";": ["Õæ", ";"],
    "|": ["«Ä", "|"],
    "/": ["‚ÅÑ", "‚ß∏"],
    "\\": ["‚ßµ", "‚ßπ"],
    "-": ["‚Äê", "‚Äì"],
    "+": ["ñ´µ", "+"],
    "<": ["·ê∏", "ñ´¨", "‚µ¶"],
    ">": ["·ê≥", ">"],
    "3": ["–ó", "3"],
    "6": ["·èÆ", "6"],
    "√Ü": ["”î", "√Ü"],
    "a": ["–∞", "a"],
    "e": ["–µ", "e"],
    "o": ["–æ", "o"],
    "i": ["—ñ", "i"],
    "p": ["—Ä", "p"],
    "s": ["—ï", "s"],
    "t": ["—Ç", "t"],
    "u": ["—É", "u"],
    "x": ["—Ö", "x"],
    "y": ["—É", "y"],
    "z": ["ÍÆì", "z"]
}

approximate_replacements = {
    "3": ["”†", "3"],
    "5": ["∆º", "5"],
    "6": ["–±", "6"],
    "A": ["·óÖ", "A"],
    "B": ["·ó∑", "B"],
    "C": ["·èü", "C"],
    "D": ["‚ÖÆ", "D"],
    "I": ["‚Ö†", "I"],
    "O": ["‚µî", "O"],
    "P": ["Íìë", "P"],
    "R": ["·é°", "R"],
    "S": ["Íì¢", "S"],
    "T": ["„Ñí", "T"],
    "V": ["·êØ", "V"],
    "W": ["·èî", "W"],
    "X": ["œá", "X"],
    "g": ["…°", "g"],
    "k": ["–∫", "k"],
    "m": ["‚Öø", "m"],
    "p": ["œÅ", "p"],
    "s": ["’ø", "s"],
    "u": ["œÖ", "u"],
    "x": ["‚Öπ", "x"]
}


def replace_group(text, replacements):
    for group, candidates in replacements.items():
        if random.randint(1, 10) <= 6:  # 60% chance of replacing
            text = text.replace(group, random.choice(candidates))
    return text


def obfuscate_text(input_text, use_approximate=False):
    # Step 1: Replace groups from identicalGroupReplacements
    input_text = replace_group(input_text, identical_group_replacements)

    if use_approximate:
        # Step 2: Replace groups from approximateGroupReplacements if enabled
        input_text = replace_group(input_text, approximate_group_replacements)

    output_text = ""

    # Step 3: Replace individual characters from identicalReplacements and approximateReplacements
    for char in input_text:
        candidates = identical_replacements.get(char, [char])  # Use original char if no replacement

        if use_approximate:
            candidates += approximate_replacements.get(char, [])

        # Randomly choose a replacement character if possible
        if random.randint(1, 10) <= 6:  # 60% chance of obfuscating a character
            output_text += random.choice(candidates)
        else:
            output_text += char

    return output_text


def obfuscate_file(input_file, output_file, use_approximate=False):
    # Read the input sentences from the file
    with open(input_file, 'r', encoding='utf-8') as infile:
        sentences = infile.readlines()

    # Open the output file to write obfuscated sentences using UTF-8 encoding
    with open(output_file, 'w', encoding='utf-8') as outfile:
        for sentence in sentences:
            obfuscated_sentence = obfuscate_text(sentence.strip(), use_approximate)
            outfile.write(obfuscated_sentence + '\n')

# Example usage
input_file = 'word_list.txt'  # Your file with 100 different sentences
output_file = 'obfuscated_output.txt'  # Output file for obfuscated sentences

# Obfuscate the sentences and save them to a new file
obfuscate_file(input_file, output_file, use_approximate=True)

print(f"Obfuscated sentences saved to {output_file}.")

